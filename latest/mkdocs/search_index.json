{
    "docs": [
        {
            "location": "/", 
            "text": "StingerGraphs\n\n\nStingerGraphs is a Julia wrapper around the \nSTINGER\n library for processing streaming/dynamic graphs. This wrapper is built around the \ndev\n branch of the STINGER repository.\n\n\n\n\nContents\n\n\n\n\nStingerGraphs\n\n\nContents\n\n\nSetup\n\n\nThe Stinger type\n\n\nCreating STINGER graphs\n\n\nAdding and Removing edges\n\n\nConsistency Checks\n\n\nAPI Documentation\n\n\n\n\n\n\n\n\n\n\nSetup\n\n\nIf you have the \nlibstinger_core\n shared library in a custom path, please configure the environment variable \nSTINGER_LIB_PATH\n with the path to the folder containing the library.\n\n\n\n\nThe Stinger type\n\n\nThe Stinger type can be used to create a new STINGER data structure. Due to the use of variable length attributes in the C STINGER data structure, we are unable to use a Julia type to directly map to a STINGER type (http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/#struct-type-correspondences). So we use the C pointer handle to interact with the STINGER library in the implementation.\n\n\n\n\nCreating STINGER graphs\n\n\ns = Stinger() #Creates a new datastructure\n#Alternatively, to initialize a stinger graph with initial edges (stinger_set_initial_edges)\ns = Stinger(5, 0, [0 for i=1:6], [i%5 for i=1:5], [2 for i=1:5], Int64[], Int64[], -2)\n\n\n\n\nWe have registered finalizers with Julia that automatically frees your STINGER data structure, the next time the gc runs after it goes out of scope.\n\n\n\n\nAdding and Removing edges\n\n\nUse the \ninsert_edge!\n and \nremove_edge!\n to add and remove edges respectively. They return the value of 1 on success.\n\n\ns = Stinger(5, 0, [0 for i=1:6], [i%5 for i=1:5], [2 for i=1:5], Int64[], Int64[], -2)\ninsert_edge!(s, 0, 1, 4, 2, 2)\nremove_edge!(s, 0, 1, 4)\n\n\n\n\n\n\nConsistency Checks\n\n\nThe STINGER graph can be checked for consistency using the \nconsistency_check\n function. It returns \ntrue\n if consistent or \nfalse\n if inconsistent.\n\n\n\n\nAPI Documentation\n\n\n#\n\n\nStingerGraphs.Stinger\n \n \nType\n.\n\n\nThe \nStinger\n type is the Julia type representing a STINGER data structure created in C. It stores the handle to the C data structure. The C data structure is automatically freed when the finalizer runs.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.StingerConfig\n \n \nType\n.\n\n\nUsed to set the configuration of the STINGER data structure.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.StingerEdge\n \n \nType\n.\n\n\nThe STINGER Edge representation.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.StingerVertex\n \n \nType\n.\n\n\nThe STINGER Vertex representation.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.bfs\n \n \nMethod\n.\n\n\nbfs(alg::LevelSynchronous, s::Stinger, source::Int64, nv::Int64)\n\n\n\n\nUses the \nLevelSynchronous\n algorithm to perform a parallel BFS with the specified source node.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.bfs\n \n \nMethod\n.\n\n\nbfs(s::Stinger, source::Int64, nv::Int64)\n\n\n\n\nbfs\n returns a parents array of length \nnv\n. An empty array is returned on failure.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.bfs\n \n \nMethod\n.\n\n\nbfs(s::Stinger, source::Int64)\n\n\n\n\nThis version is slower as it allocates the maximum possible vertices in the Stinger graph. If you know the maximum number of active vertices, call \nbfs(s, source, nv)\n which is faster.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.bfsdistances\n \n \nMethod\n.\n\n\nbfsdistances(s::Stinger, source::Int64, nv::Int64)\n\n\n\n\nObtain both the \nparents\n array as well as the \ndistances\n from source. Empty arrays are returned on failure.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.bfsdistances\n \n \nMethod\n.\n\n\nbfsdistances(s::Stinger, source::Int64)\n\n\n\n\nThis version is slower as it allocates the maximum possible vertices in the Stinger graph. If you know the maximum number of active vertices, call \nbfsdistances(s, source, nv)\n which is faster.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.consistency_check\n \n \nMethod\n.\n\n\nconsistency_check(s::Stinger, nv::Int64)\n\n\n\n\nRuns a consistency check on the STINGER data structure. Returns \ntrue\n if the check passed and \nfalse\n if it fails.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.edgeparse\n \n \nMethod\n.\n\n\nedgeparse(edge::StingerEdge)\n\n\n\n\nParse the direction and neighbor given a \nStingerEdge\n. The first 2 bits of the \nneighbor\n field of the edge denotes the direction. 1 - in, 2 - out, 3 - both\n\n\nsource\n\n\n#\n\n\nStingerGraphs.edgeweight\n \n \nMethod\n.\n\n\nedgeweight(s::Stinger, src::Int64, dst::Int64, etype::Int64)\n\n\n\n\nReturn the weight of the edge between \nsrc\n and \ndst\n of type \netype\n. If it doesn't exist return 0.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.foralledges\n \n \nMethod\n.\n\n\nforalledges(f::Function, s::Stinger, v::Int64)\n\n\n\n\nIterates over all the edges edges of a vertex and applies a function to each edge. The function should take 3 arguments. \nf(current_edge::StingerEdge, vertexid::Int64, etype::Int64)\n\n\nsource\n\n\n#\n\n\nStingerGraphs.generateconfig\n \n \nMethod\n.\n\n\ngenerateconfig(nv::Int64; netypes::Int64=1, nvtypes::Int64=1)\n\n\n\n\nGenerates a config for the specified number and types of vertices and the number of edge types. The generated config attempts to maximize the number of edge blocks that can be allocated.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.get_nv\n \n \nMethod\n.\n\n\nget_nv(x::Stinger)\n\n\n\n\nReturns number of active vertices in the graph. This is based on the largest vertex ID which has a non-zero indegree or outdegree.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.getsuccessors\n \n \nMethod\n.\n\n\ngetsuccessors(s::Stinger, src::Int64)\n\n\n\n\nReturns a \nVector\n of indices representing the successors of \nsrc\n.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.getvertex\n \n \nMethod\n.\n\n\ngetvertex(s::Stinger, v::Int64)\n\n\n\n\nLoad the specified vertex from the STINGER datastructure.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.insert_edge!\n \n \nMethod\n.\n\n\ninsert_edge!(\n    s::Stinger, etype::Int64, from::Int64, to::Int64, weight::Int64,\n    timestamp::Int64\n)\n\n\n\n\nInserts an edge of type \netype\n from \nfrom\n to \nto\n into the STINGER graph \ns\n with the specified \nweight\n and \ntimestamp\n. Raises an error if the operation was not successful.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.insert_edges!\n \n \nMethod\n.\n\n\ninsert_edges!(s::Stinger, edges::AbstractArray, numedges::Integer)\n\n\n\n\nInserts \nnumedges\n edges into the STINGER graph \ns\n. Input format is 5\u00d7numedges (etype, src, dst, weight, times).\n\n\nsource\n\n\n#\n\n\nStingerGraphs.kcore\n \n \nMethod\n.\n\n\nkcore(s::Stinger, nv::Int64)\n\n\n\n\nFinds the kcore of the graph. Uses the \nkcore_find\n function exposed by the C STINGER library. Returns the labels and the counts as two \nVector{Int64}\ns.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.kcore\n \n \nMethod\n.\n\n\nkcore(s::Stinger)\n\n\n\n\nThis version is slower as it makes a call to \nstinger_max_active_vertex\n, which is sequential and runs through every vertex in the graph. If you know the maximum number of active vertices, call \nkcore(s, nv)\n which is faster.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.kronecker\n \n \nMethod\n.\n\n\nkronecker(\n    scale::Int64,\n    edgefactor::Int64;\n    a::Float64=0.57,\n    b::Float64=0.19,\n    c::Float64=0.19\n)\n\n\n\n\nGenerates edges for a Kronecker generator graph. Returns an array of 2 rows with 1st being the start edge and 2nd row having the end edge.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.outdegree\n \n \nMethod\n.\n\n\noutdegree(s::Stinger, src::Int64)\n\n\n\n\nReturns the outdegree of vertex index.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.remove_edge!\n \n \nMethod\n.\n\n\nremove_edge!(s::Stinger, etype::Int64, from::Int64, to::Int64)\n\n\n\n\nRemoves the edge of type \netype\n from \nfrom\n to \nto\n from the STINGER graph \ns\n. Raises an error in the edge was not found or if there was an error while removing the edge.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.remove_edges!\n \n \nMethod\n.\n\n\nremove_edges!(s::Stinger, edges::AbstractArray, numedges::Integer)\n\n\n\n\nRemoves \nnumedges\n from the STINGER graph \ns\n. Input format is 5\u00d7numedges (etype, src, dst, weight, times) to make consistent with \ninsert_edges!\n. Only the \nsrc\n, \ndst\n and \netype\n fields matter.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.stingerconfig\n \n \nMethod\n.\n\n\nstingerconfig(\n    nv, nebs=0, netypes=0, nvtypes=0, memory_size=0, no_map_none_etype=0,\n    no_map_none_vtype=0, no_resize=0)\n\n\n\n\nCreates a \nStingerConfig\n.\n\n\nsource\n\n\n#\n\n\nBase.getindex\n \n \nMethod\n.\n\n\ngetindex(x::Stinger, field::StingerFields)\n\n\n\n\nObtain value of a field from the Stinger data structure. For \nbatch_time\n and \nupdate_time\n, use \nget_batchtime\n and \nget_updatetime\n respectively.\n\n\nsource\n\n\n#\n\n\nBase.setindex!\n \n \nMethod\n.\n\n\nsetindex!(x::Stinger, val, field::StingerFields)\n\n\n\n\nSet value of a field from the Stinger data structure.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.loadstingergraph\n \n \nMethod\n.\n\n\nloadstingergraph(s::Stinger)\n\n\n\n\nUse this to get a \nStingerGraph\n representation of your \nStinger\n graph. This representation will not be kept in sync with the graph. If you make changes, you will need to call this again to load the graph with the new attributes.\n\n\nsource\n\n\n#\n\n\nStingerGraphs.storageptr\n \n \nMethod\n.\n\n\nstorageptr(s::Stinger)\n\n\n\n\nGet a pointer to the storage array of the STINGER data structure\n\n\nsource", 
            "title": "Home"
        }, 
        {
            "location": "/#stingergraphs", 
            "text": "StingerGraphs is a Julia wrapper around the  STINGER  library for processing streaming/dynamic graphs. This wrapper is built around the  dev  branch of the STINGER repository.", 
            "title": "StingerGraphs"
        }, 
        {
            "location": "/#contents", 
            "text": "StingerGraphs  Contents  Setup  The Stinger type  Creating STINGER graphs  Adding and Removing edges  Consistency Checks  API Documentation", 
            "title": "Contents"
        }, 
        {
            "location": "/#setup", 
            "text": "If you have the  libstinger_core  shared library in a custom path, please configure the environment variable  STINGER_LIB_PATH  with the path to the folder containing the library.", 
            "title": "Setup"
        }, 
        {
            "location": "/#the-stinger-type", 
            "text": "The Stinger type can be used to create a new STINGER data structure. Due to the use of variable length attributes in the C STINGER data structure, we are unable to use a Julia type to directly map to a STINGER type (http://docs.julialang.org/en/release-0.4/manual/calling-c-and-fortran-code/#struct-type-correspondences). So we use the C pointer handle to interact with the STINGER library in the implementation.", 
            "title": "The Stinger type"
        }, 
        {
            "location": "/#creating-stinger-graphs", 
            "text": "s = Stinger() #Creates a new datastructure\n#Alternatively, to initialize a stinger graph with initial edges (stinger_set_initial_edges)\ns = Stinger(5, 0, [0 for i=1:6], [i%5 for i=1:5], [2 for i=1:5], Int64[], Int64[], -2)  We have registered finalizers with Julia that automatically frees your STINGER data structure, the next time the gc runs after it goes out of scope.", 
            "title": "Creating STINGER graphs"
        }, 
        {
            "location": "/#adding-and-removing-edges", 
            "text": "Use the  insert_edge!  and  remove_edge!  to add and remove edges respectively. They return the value of 1 on success.  s = Stinger(5, 0, [0 for i=1:6], [i%5 for i=1:5], [2 for i=1:5], Int64[], Int64[], -2)\ninsert_edge!(s, 0, 1, 4, 2, 2)\nremove_edge!(s, 0, 1, 4)", 
            "title": "Adding and Removing edges"
        }, 
        {
            "location": "/#consistency-checks", 
            "text": "The STINGER graph can be checked for consistency using the  consistency_check  function. It returns  true  if consistent or  false  if inconsistent.", 
            "title": "Consistency Checks"
        }, 
        {
            "location": "/#api-documentation", 
            "text": "#  StingerGraphs.Stinger     Type .  The  Stinger  type is the Julia type representing a STINGER data structure created in C. It stores the handle to the C data structure. The C data structure is automatically freed when the finalizer runs.  source  #  StingerGraphs.StingerConfig     Type .  Used to set the configuration of the STINGER data structure.  source  #  StingerGraphs.StingerEdge     Type .  The STINGER Edge representation.  source  #  StingerGraphs.StingerVertex     Type .  The STINGER Vertex representation.  source  #  StingerGraphs.bfs     Method .  bfs(alg::LevelSynchronous, s::Stinger, source::Int64, nv::Int64)  Uses the  LevelSynchronous  algorithm to perform a parallel BFS with the specified source node.  source  #  StingerGraphs.bfs     Method .  bfs(s::Stinger, source::Int64, nv::Int64)  bfs  returns a parents array of length  nv . An empty array is returned on failure.  source  #  StingerGraphs.bfs     Method .  bfs(s::Stinger, source::Int64)  This version is slower as it allocates the maximum possible vertices in the Stinger graph. If you know the maximum number of active vertices, call  bfs(s, source, nv)  which is faster.  source  #  StingerGraphs.bfsdistances     Method .  bfsdistances(s::Stinger, source::Int64, nv::Int64)  Obtain both the  parents  array as well as the  distances  from source. Empty arrays are returned on failure.  source  #  StingerGraphs.bfsdistances     Method .  bfsdistances(s::Stinger, source::Int64)  This version is slower as it allocates the maximum possible vertices in the Stinger graph. If you know the maximum number of active vertices, call  bfsdistances(s, source, nv)  which is faster.  source  #  StingerGraphs.consistency_check     Method .  consistency_check(s::Stinger, nv::Int64)  Runs a consistency check on the STINGER data structure. Returns  true  if the check passed and  false  if it fails.  source  #  StingerGraphs.edgeparse     Method .  edgeparse(edge::StingerEdge)  Parse the direction and neighbor given a  StingerEdge . The first 2 bits of the  neighbor  field of the edge denotes the direction. 1 - in, 2 - out, 3 - both  source  #  StingerGraphs.edgeweight     Method .  edgeweight(s::Stinger, src::Int64, dst::Int64, etype::Int64)  Return the weight of the edge between  src  and  dst  of type  etype . If it doesn't exist return 0.  source  #  StingerGraphs.foralledges     Method .  foralledges(f::Function, s::Stinger, v::Int64)  Iterates over all the edges edges of a vertex and applies a function to each edge. The function should take 3 arguments.  f(current_edge::StingerEdge, vertexid::Int64, etype::Int64)  source  #  StingerGraphs.generateconfig     Method .  generateconfig(nv::Int64; netypes::Int64=1, nvtypes::Int64=1)  Generates a config for the specified number and types of vertices and the number of edge types. The generated config attempts to maximize the number of edge blocks that can be allocated.  source  #  StingerGraphs.get_nv     Method .  get_nv(x::Stinger)  Returns number of active vertices in the graph. This is based on the largest vertex ID which has a non-zero indegree or outdegree.  source  #  StingerGraphs.getsuccessors     Method .  getsuccessors(s::Stinger, src::Int64)  Returns a  Vector  of indices representing the successors of  src .  source  #  StingerGraphs.getvertex     Method .  getvertex(s::Stinger, v::Int64)  Load the specified vertex from the STINGER datastructure.  source  #  StingerGraphs.insert_edge!     Method .  insert_edge!(\n    s::Stinger, etype::Int64, from::Int64, to::Int64, weight::Int64,\n    timestamp::Int64\n)  Inserts an edge of type  etype  from  from  to  to  into the STINGER graph  s  with the specified  weight  and  timestamp . Raises an error if the operation was not successful.  source  #  StingerGraphs.insert_edges!     Method .  insert_edges!(s::Stinger, edges::AbstractArray, numedges::Integer)  Inserts  numedges  edges into the STINGER graph  s . Input format is 5\u00d7numedges (etype, src, dst, weight, times).  source  #  StingerGraphs.kcore     Method .  kcore(s::Stinger, nv::Int64)  Finds the kcore of the graph. Uses the  kcore_find  function exposed by the C STINGER library. Returns the labels and the counts as two  Vector{Int64} s.  source  #  StingerGraphs.kcore     Method .  kcore(s::Stinger)  This version is slower as it makes a call to  stinger_max_active_vertex , which is sequential and runs through every vertex in the graph. If you know the maximum number of active vertices, call  kcore(s, nv)  which is faster.  source  #  StingerGraphs.kronecker     Method .  kronecker(\n    scale::Int64,\n    edgefactor::Int64;\n    a::Float64=0.57,\n    b::Float64=0.19,\n    c::Float64=0.19\n)  Generates edges for a Kronecker generator graph. Returns an array of 2 rows with 1st being the start edge and 2nd row having the end edge.  source  #  StingerGraphs.outdegree     Method .  outdegree(s::Stinger, src::Int64)  Returns the outdegree of vertex index.  source  #  StingerGraphs.remove_edge!     Method .  remove_edge!(s::Stinger, etype::Int64, from::Int64, to::Int64)  Removes the edge of type  etype  from  from  to  to  from the STINGER graph  s . Raises an error in the edge was not found or if there was an error while removing the edge.  source  #  StingerGraphs.remove_edges!     Method .  remove_edges!(s::Stinger, edges::AbstractArray, numedges::Integer)  Removes  numedges  from the STINGER graph  s . Input format is 5\u00d7numedges (etype, src, dst, weight, times) to make consistent with  insert_edges! . Only the  src ,  dst  and  etype  fields matter.  source  #  StingerGraphs.stingerconfig     Method .  stingerconfig(\n    nv, nebs=0, netypes=0, nvtypes=0, memory_size=0, no_map_none_etype=0,\n    no_map_none_vtype=0, no_resize=0)  Creates a  StingerConfig .  source  #  Base.getindex     Method .  getindex(x::Stinger, field::StingerFields)  Obtain value of a field from the Stinger data structure. For  batch_time  and  update_time , use  get_batchtime  and  get_updatetime  respectively.  source  #  Base.setindex!     Method .  setindex!(x::Stinger, val, field::StingerFields)  Set value of a field from the Stinger data structure.  source  #  StingerGraphs.loadstingergraph     Method .  loadstingergraph(s::Stinger)  Use this to get a  StingerGraph  representation of your  Stinger  graph. This representation will not be kept in sync with the graph. If you make changes, you will need to call this again to load the graph with the new attributes.  source  #  StingerGraphs.storageptr     Method .  storageptr(s::Stinger)  Get a pointer to the storage array of the STINGER data structure  source", 
            "title": "API Documentation"
        }
    ]
}